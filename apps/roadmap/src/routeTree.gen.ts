/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RootImport } from './routes/root'
import { Route as FrontendImport } from './routes/frontend'
import { Route as CommonImport } from './routes/common'
import { Route as BackendImport } from './routes/backend'

// Create/Update Routes

const RootRoute = RootImport.update({
  id: '/root',
  path: '/root',
  getParentRoute: () => rootRoute,
} as any)

const FrontendRoute = FrontendImport.update({
  id: '/frontend',
  path: '/frontend',
  getParentRoute: () => rootRoute,
} as any)

const CommonRoute = CommonImport.update({
  id: '/common',
  path: '/common',
  getParentRoute: () => rootRoute,
} as any)

const BackendRoute = BackendImport.update({
  id: '/backend',
  path: '/backend',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/backend': {
      id: '/backend'
      path: '/backend'
      fullPath: '/backend'
      preLoaderRoute: typeof BackendImport
      parentRoute: typeof rootRoute
    }
    '/common': {
      id: '/common'
      path: '/common'
      fullPath: '/common'
      preLoaderRoute: typeof CommonImport
      parentRoute: typeof rootRoute
    }
    '/frontend': {
      id: '/frontend'
      path: '/frontend'
      fullPath: '/frontend'
      preLoaderRoute: typeof FrontendImport
      parentRoute: typeof rootRoute
    }
    '/root': {
      id: '/root'
      path: '/root'
      fullPath: '/root'
      preLoaderRoute: typeof RootImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/backend': typeof BackendRoute
  '/common': typeof CommonRoute
  '/frontend': typeof FrontendRoute
  '/root': typeof RootRoute
}

export interface FileRoutesByTo {
  '/backend': typeof BackendRoute
  '/common': typeof CommonRoute
  '/frontend': typeof FrontendRoute
  '/root': typeof RootRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/backend': typeof BackendRoute
  '/common': typeof CommonRoute
  '/frontend': typeof FrontendRoute
  '/root': typeof RootRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/backend' | '/common' | '/frontend' | '/root'
  fileRoutesByTo: FileRoutesByTo
  to: '/backend' | '/common' | '/frontend' | '/root'
  id: '__root__' | '/backend' | '/common' | '/frontend' | '/root'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  BackendRoute: typeof BackendRoute
  CommonRoute: typeof CommonRoute
  FrontendRoute: typeof FrontendRoute
  RootRoute: typeof RootRoute
}

const rootRouteChildren: RootRouteChildren = {
  BackendRoute: BackendRoute,
  CommonRoute: CommonRoute,
  FrontendRoute: FrontendRoute,
  RootRoute: RootRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/backend",
        "/common",
        "/frontend",
        "/root"
      ]
    },
    "/backend": {
      "filePath": "backend.tsx"
    },
    "/common": {
      "filePath": "common.tsx"
    },
    "/frontend": {
      "filePath": "frontend.tsx"
    },
    "/root": {
      "filePath": "root.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
